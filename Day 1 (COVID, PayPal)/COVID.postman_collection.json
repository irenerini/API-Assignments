{
	"info": {
		"_postman_id": "6cd0699c-d9d6-4903-aa3a-8c5eb4f3de81",
		"name": "COVID",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "COVID",
			"item": [
				{
					"name": "Covid-19",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29485c09-77f0-44ec-8a29-de48ce18d1ab",
								"exec": [
									"var json = pm.response.json();\r",
									"console.log(json);\r",
									"\r",
									"let myMap = new Map();\r",
									"\r",
									"for (i=0;i<json.length;i++){\r",
									" \r",
									" if(json[i][\"New Cases_text\"]){\r",
									"     myMap.set(json[i][\"Country_text\"],parseInt(json[i][\"New Cases_text\"].replace(/[^0-9 ]/g, \"\")));\r",
									"      }\r",
									" }\r",
									"\r",
									"//console.log(myMap);\r",
									"\r",
									"const mapSort1 = new Map([...myMap.entries()].sort((a, b) => b[1] - a[1]));\r",
									"console.log(mapSort1);\r",
									"\r",
									"var mapIter = mapSort1.keys();\r",
									"\r",
									"console.log('Find the top 5 Country with Highest New Cases');\r",
									"\r",
									"let top5 = [];\r",
									"for (i=0;i<5;i++){\r",
									"//console.log(mapIter.next().value);\r",
									"top5[i] = mapIter.next().value;\r",
									"}\r",
									"\r",
									"//let top5 = Array.from( mapSort1.keys() );\r",
									"\r",
									"console.log(top5);\r",
									"\r",
									"let myMap1 = new Map();\r",
									"\r",
									"for (i=0;i<json.length;i++){\r",
									" \r",
									" if(json[i][\"New Deaths_text\"]){\r",
									"     myMap1.set(json[i][\"Country_text\"],parseInt(json[i][\"New Deaths_text\"].replace(/[^0-9 ]/g, \"\")));\r",
									"      }\r",
									" }\r",
									"\r",
									"//console.log(myMap1);\r",
									"\r",
									"const mapSort2 = new Map([...myMap.entries()].sort((a, b) => a[1] - b[1]));\r",
									"console.log(mapSort2)\r",
									"\r",
									"var mapIter1 = mapSort2.keys();\r",
									"\r",
									"console.log('Find the top 5 Country with lowest New Deaths Cases');\r",
									"\r",
									"for (i=0;i<5;i++){\r",
									"console.log(mapIter1.next().value);\r",
									"}\r",
									"\r",
									"let countryst = new Map();\r",
									"\r",
									"for (i=0;i<json.length;i++){\r",
									" \r",
									"\r",
									"     countryst.set(json[i][\"Country_text\"], {\"Active Cases_text\" : json[i][\"Active Cases_text\"], \"New Cases_text\" : json[i][\"New Cases_text\"], \"New Deaths_text\" : json[i][\"New Deaths_text\"], \"Total Cases_text\" : json[i][\"Total Cases_text\"], \"Total Deaths_text\" : json[i][\"Total Deaths_text\"], \"Total Recovered_text\":json[i][\"Total Recovered_text\"]});\r",
									"      \r",
									" }\r",
									"\r",
									"console.log(\"Status of India is \", countryst.get(\"India\"));\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Verify the Content Type = json\", function () {\r",
									"   pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"/*//var id1 = json[Country_text];\r",
									"//console.log(id1);\r",
									"\r",
									" var newcases = new Array();\r",
									" var newcase = new Array();\r",
									"for (i=0;i<json.length;i++)\r",
									"{\r",
									"    if(json[i][\"New Cases_text\"]!=\"\"){\r",
									"    //console.log(json[i][\"New Cases_text\"]);\r",
									"    var count = i +0;\r",
									"    \r",
									"    }\r",
									"}\r",
									"\r",
									"for (i=0;i<json.length;i++){\r",
									" \r",
									" if(json[i][\"New Cases_text\"]){\r",
									"    newcases[i] = json[i][\"New Cases_text\"];\r",
									"\r",
									"    newcase[i] = parseInt(json[i][\"New Cases_text\"].replace(/[^0-9 ]/g, \"\"));\r",
									" } \r",
									"     \r",
									"}\r",
									"\r",
									"console.log(count);\r",
									"console.log(newcases.length);\r",
									"var newcasefiltered = newcasearray.filter(function( element ) {\r",
									"   return element !== undefined;\r",
									"});\r",
									"\r",
									"\r",
									"//console.log(newcases);\r",
									"//console.log(newcase);\r",
									"console.log(newcasefiltered);\r",
									"\r",
									"numberSort = function (a,b) {\r",
									"    return a - b;\r",
									"};\r",
									"\r",
									"newcasefiltered.sort(numberSort).reverse();\r",
									"console.log(newcasefiltered);*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://covid-19.dataflowkit.com/v1",
							"protocol": "https",
							"host": [
								"covid-19",
								"dataflowkit",
								"com"
							],
							"path": [
								"v1"
							],
							"query": [
								{
									"key": "Country_text",
									"value": "USA",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}